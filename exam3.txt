SQL> connect user100
Connected.
SQL> create table department(id number(5) primary key, dep_name varchar2(50) unique);

Table created.

SQL> create table employee(id number(5), name varchar2(50), salary number(8,2) check(salary>25000), joining_date date check(joining_date<'01-jan-2000'), department_id number(5) not null, foreign key(department_id) references department(id));

Table created.

SQL> create sequence dep_seq increment by 10 start with 10 nocache nocycle;

Sequence created.

SQL> create sequence emp_seq increment by 1 nocache nocycle;

Sequence created.

SQL> create table emp_backup as select * from employee;

Table created.

SQL> CREATE OR REPLACE TRIGGER emp_after_insert AFTER INSERT ON employee
  2  FOR EACH ROW
  3  DECLARE
  4  BEGIN
  5  insert into emp_backup values(:new.id, :new.name, :new.salary, :new.joining_date, :new.department_id);
  6  DBMS_OUTPUT.PUT_LINE('successfully inserted');
  7  END;
  8  /

Trigger created.

SQL> CREATE OR REPLACE TRIGGER emp_after_update AFTER UPDATE ON employee
  2  FOR EACH ROW
  3  DECLARE
  4  BEGIN
  5  update emp_backup
  6  set id= :new.id, name= :new.name, salary=:new.salary, joining_date=:new.joining_date, department_id= :new.department_id
  7  where id= :old.id;
  8  DBMS_OUTPUT.PUT_LINE('Successfully updated');
  9  END;
 10  /

Trigger created.

SQL> CREATE OR REPLACE TRIGGER emp_after_delete AFTER DELETE ON employee
  2  FOR EACH ROW
  3  DECLARE
  4  BEGIN
  5  delete from emp_backup
  6  where id= :old.id;
  7  DBMS_OUTPUT.PUT_LINE('Successfully deleted');
  8  END;
  9  /

Trigger created.

SQL> CREATE OR REPLACE PROCEDURE insertEmpolyee(p_id IN employee.id%TYPE, p_name IN employee.name%TYPE, p_salary IN employee.salary%TYPE, p_joining_date IN employee.joining_date%type, p_department_id IN employee.department_id%TYPE)
  2  IS
  3  BEGIN
  4  INSERT INTO employee(id, name, salary, joining_date, department_id) values(p_id, p_name, p_salary, p_joining_date, p_department_id);
  5  COMMIT;
  6  END;
  7  /

Procedure created.

SQL> CREATE OR REPLACE PROCEDURE updateEmployee(p_id IN employee.id%TYPE, p_name IN employee.name%TYPE, p_salary IN employee.salary%TYPE, p_joining_date IN employee.joining_date%type, p_department_id IN employee.department_id%TYPE)
  2  IS
  3  BEGIN
  4  UPSARE employee set name=p_name, salary=p_salary, joining_date=p_joining_date, department_id=p_department_id
  5  where id=p_id;
  6  COMMIT;
  7  END;
  8  /

Warning: Procedure created with compilation errors.

SQL> CREATE OR REPLACE PROCEDURE updateEmployee(p_id IN employee.id%TYPE, p_name IN employee.name%TYPE, p_salary IN employee.salary%TYPE, p_joining_date IN employee.joining_date%type, p_department_id IN employee.department_id%TYPE)
  2  IS
  3  BEGIN
  4  UPDATE employee set name=p_name, salary=p_salary, joining_date=p_joining_date, department_id=p_department_id
  5  where id=p_id;
  6  COMMIT;
  7  END;
  8  /

Procedure created.

SQL> CREATE OR REPLACE PROCEDURE updateEmployee(p_id IN employee.id%TYPE)
  2  IS
  3  BEGIN
  4  DELETE FROM employee
  5  where id=p_id;
  6  COMMIT;
  7  END;
  8  /

Procedure created.

SQL> CREATE OR REPLACE PROCEDURE updateEmployee(p_id IN employee.id%TYPE, p_name IN employee.name%TYPE, p_salary IN employee.salary%TYPE, p_joining_date IN employee.joining_date%type, p_department_id IN employee.department_id%TYPE)
  2  IS
  3  BEGIN
  4  UPDATE employee set name=p_name, salary=p_salary, joining_date=p_joining_date, department_id=p_department_id
  5  where id=p_id;
  6  COMMIT;
  7  END;
  8  /

Procedure created.

SQL> CREATE OR REPLACE PROCEDURE deleteEmployee(p_id IN employee.id%TYPE)
  2  IS
  3  BEGIN
  4  DELETE FROM EMPLOYEE
  5  where id=p_id;
  6  COMMIT;
  7  END;
  8  /

Procedure created.

SQL> insert into department(id, dep_name) values(dep_seq.NEXTVAL, 'IT_PROG');

1 row created.

SQL> insert into department(id, dep_name) values(dep_seq.NEXTVAL, 'SA_REP');

1 row created.

SQL> insert into department(id, dep_name) values(dep_seq.NEXTVAL, 'SA_MAN');

1 row created.


SQL> BEGIN
  2  insertEmpolyee(1, 'A', 27000, '01-feb-1999', '10');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2  insertEmpolyee(2, 'B', 27000, '01-feb-1998', '20');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2  insertEmpolyee(1, 'c', 27000, '01-feb-1997', '30');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2  updateEmployee(3, 'c', 27000, '01-feb-1997', '30');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> select * from employee;

        ID NAME                                                   SALARY        
---------- -------------------------------------------------- ----------        
JOINING_D DEPARTMENT_ID                                                         
--------- -------------                                                         
         1 A                                                       27000        
01-FEB-99            10                                                         
                                                                                
         2 B                                                       27000        
01-FEB-98            20                                                         
                                                                                
         1 c                                                       27000        
01-FEB-97            30                                                         
                                                                                

SQL> BEGIN
  2  deleteEmployee(1);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2  insertEmpolyee(1, 'A', 27000, '01-feb-1999', '10');
  3  END;
  4  /

PL/SQL procedure successfully completed.




SQL> create view emp_view as select e.id "emp ID", e.name "emp Name",e.salary*12 "Annual Salary", d.dep_name "Department Name" from employee e, department d where e.department_id=d.id;

View created.

SQL> create synonym emp for employee;

Synonym created.

SQL> spool off
